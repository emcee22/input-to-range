"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = require("./index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var changeEv = {
  preventDefault: function preventDefault() {},
  target: {
    value: '123'
  }
};
var keyPressEv = {
  preventDefault: function preventDefault() {},
  keyCode: 32
};
it('renders without crashing', function () {
  (0, _enzyme.shallow)(_react["default"].createElement(_index.InputToRange, null));
});
it('checks input changes are working', function () {
  var component = (0, _enzyme.shallow)(_react["default"].createElement(_index.InputToRange, null));
  component.find('input').simulate('change', changeEv);
  expect(component.find('input').props().value).toBe('123');
});
it('checks if error appears', function () {
  changeEv.target.value = 'not correct input, should show error';
  var component = (0, _enzyme.shallow)(_react["default"].createElement(_index.InputToRange, null));
  component.find('input').simulate('change', changeEv);
  component.find('input').simulate('keypress', keyPressEv);
  expect(component.find('.InputToRange__Error').exists()).toBeTruthy();
});
it('checks if onChange is called', function () {
  var props = {
    onChange: jest.fn()
  };
  changeEv.target.value = '123';
  var component = (0, _enzyme.shallow)(_react["default"].createElement(_index.InputToRange, props));
  var spy = jest.spyOn(props, 'onChange');
  component.find('input').simulate('change', changeEv);
  component.find('input').simulate('keypress', keyPressEv);
  expect(spy).toHaveBeenCalled();
});
it('checks if removeLabel works', function () {
  changeEv.target.value = '123';
  var props = {
    useLabels: true
  };
  var component = (0, _enzyme.shallow)(_react["default"].createElement(_index.InputToRange, props));
  component.find('input').simulate('change', changeEv);
  component.find('input').simulate('keypress', keyPressEv);
  var closeEl = component.find('.InputToRange__labels-container').find('.InputToRange__labels-container__label').first().find('.InputToRange__labels-container__label__close');
  closeEl.simulate('click', 0);
  expect(component.find('.InputToRange__labels-container').find('.InputToRange__labels-container__label').first().find('.InputToRange__labels-container__label__close').exists()).toBeFalsy();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbnB1dFRvUmFuZ2UudGVzdC5qcyJdLCJuYW1lcyI6WyJjaGFuZ2VFdiIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0IiwidmFsdWUiLCJrZXlQcmVzc0V2Iiwia2V5Q29kZSIsIml0IiwiY29tcG9uZW50IiwiZmluZCIsInNpbXVsYXRlIiwiZXhwZWN0IiwicHJvcHMiLCJ0b0JlIiwiZXhpc3RzIiwidG9CZVRydXRoeSIsIm9uQ2hhbmdlIiwiamVzdCIsImZuIiwic3B5Iiwic3B5T24iLCJ0b0hhdmVCZWVuQ2FsbGVkIiwidXNlTGFiZWxzIiwiY2xvc2VFbCIsImZpcnN0IiwidG9CZUZhbHN5Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsUUFBUSxHQUFHO0FBQ2hCQyxFQUFBQSxjQUFjLEVBQUUsMEJBQU0sQ0FBRSxDQURSO0FBRWhCQyxFQUFBQSxNQUFNLEVBQUU7QUFBRUMsSUFBQUEsS0FBSyxFQUFFO0FBQVQ7QUFGUSxDQUFqQjtBQUlBLElBQU1DLFVBQVUsR0FBRztBQUNsQkgsRUFBQUEsY0FBYyxFQUFFLDBCQUFNLENBQUUsQ0FETjtBQUVsQkksRUFBQUEsT0FBTyxFQUFFO0FBRlMsQ0FBbkI7QUFLQUMsRUFBRSxDQUFDLDBCQUFELEVBQTZCLFlBQU07QUFDcEMsdUJBQVEsZ0NBQUMsbUJBQUQsT0FBUjtBQUNBLENBRkMsQ0FBRjtBQUlBQSxFQUFFLENBQUMsa0NBQUQsRUFBcUMsWUFBTTtBQUM1QyxNQUFNQyxTQUFTLEdBQUcscUJBQVEsZ0NBQUMsbUJBQUQsT0FBUixDQUFsQjtBQUVBQSxFQUFBQSxTQUFTLENBQUNDLElBQVYsQ0FBZSxPQUFmLEVBQXdCQyxRQUF4QixDQUFpQyxRQUFqQyxFQUEyQ1QsUUFBM0M7QUFFQVUsRUFBQUEsTUFBTSxDQUFDSCxTQUFTLENBQUNDLElBQVYsQ0FBZSxPQUFmLEVBQXdCRyxLQUF4QixHQUFnQ1IsS0FBakMsQ0FBTixDQUE4Q1MsSUFBOUMsQ0FBbUQsS0FBbkQ7QUFDQSxDQU5DLENBQUY7QUFRQU4sRUFBRSxDQUFDLHlCQUFELEVBQTRCLFlBQU07QUFDbkNOLEVBQUFBLFFBQVEsQ0FBQ0UsTUFBVCxDQUFnQkMsS0FBaEIsR0FBd0Isc0NBQXhCO0FBQ0EsTUFBTUksU0FBUyxHQUFHLHFCQUFRLGdDQUFDLG1CQUFELE9BQVIsQ0FBbEI7QUFFQUEsRUFBQUEsU0FBUyxDQUFDQyxJQUFWLENBQWUsT0FBZixFQUF3QkMsUUFBeEIsQ0FBaUMsUUFBakMsRUFBMkNULFFBQTNDO0FBQ0FPLEVBQUFBLFNBQVMsQ0FBQ0MsSUFBVixDQUFlLE9BQWYsRUFBd0JDLFFBQXhCLENBQWlDLFVBQWpDLEVBQTZDTCxVQUE3QztBQUVBTSxFQUFBQSxNQUFNLENBQUNILFNBQVMsQ0FBQ0MsSUFBVixDQUFlLHNCQUFmLEVBQXVDSyxNQUF2QyxFQUFELENBQU4sQ0FBd0RDLFVBQXhEO0FBQ0EsQ0FSQyxDQUFGO0FBVUFSLEVBQUUsQ0FBQyw4QkFBRCxFQUFpQyxZQUFNO0FBQ3hDLE1BQU1LLEtBQUssR0FBRztBQUFFSSxJQUFBQSxRQUFRLEVBQUVDLElBQUksQ0FBQ0MsRUFBTDtBQUFaLEdBQWQ7QUFDQWpCLEVBQUFBLFFBQVEsQ0FBQ0UsTUFBVCxDQUFnQkMsS0FBaEIsR0FBd0IsS0FBeEI7QUFDQSxNQUFNSSxTQUFTLEdBQUcscUJBQVEsZ0NBQUMsbUJBQUQsRUFBa0JJLEtBQWxCLENBQVIsQ0FBbEI7QUFDQSxNQUFNTyxHQUFHLEdBQUdGLElBQUksQ0FBQ0csS0FBTCxDQUFXUixLQUFYLEVBQWtCLFVBQWxCLENBQVo7QUFFQUosRUFBQUEsU0FBUyxDQUFDQyxJQUFWLENBQWUsT0FBZixFQUF3QkMsUUFBeEIsQ0FBaUMsUUFBakMsRUFBMkNULFFBQTNDO0FBQ0FPLEVBQUFBLFNBQVMsQ0FBQ0MsSUFBVixDQUFlLE9BQWYsRUFBd0JDLFFBQXhCLENBQWlDLFVBQWpDLEVBQTZDTCxVQUE3QztBQUVBTSxFQUFBQSxNQUFNLENBQUNRLEdBQUQsQ0FBTixDQUFZRSxnQkFBWjtBQUNBLENBVkMsQ0FBRjtBQVlBZCxFQUFFLENBQUMsNkJBQUQsRUFBZ0MsWUFBTTtBQUN2Q04sRUFBQUEsUUFBUSxDQUFDRSxNQUFULENBQWdCQyxLQUFoQixHQUF3QixLQUF4QjtBQUNBLE1BQU1RLEtBQUssR0FBRztBQUFFVSxJQUFBQSxTQUFTLEVBQUU7QUFBYixHQUFkO0FBQ0EsTUFBTWQsU0FBUyxHQUFHLHFCQUFRLGdDQUFDLG1CQUFELEVBQWtCSSxLQUFsQixDQUFSLENBQWxCO0FBRUFKLEVBQUFBLFNBQVMsQ0FBQ0MsSUFBVixDQUFlLE9BQWYsRUFBd0JDLFFBQXhCLENBQWlDLFFBQWpDLEVBQTJDVCxRQUEzQztBQUNBTyxFQUFBQSxTQUFTLENBQUNDLElBQVYsQ0FBZSxPQUFmLEVBQXdCQyxRQUF4QixDQUFpQyxVQUFqQyxFQUE2Q0wsVUFBN0M7QUFFQSxNQUFNa0IsT0FBTyxHQUFHZixTQUFTLENBQ3ZCQyxJQURjLENBQ1QsaUNBRFMsRUFFZEEsSUFGYyxDQUVULHdDQUZTLEVBR2RlLEtBSGMsR0FJZGYsSUFKYyxDQUlULCtDQUpTLENBQWhCO0FBS0FjLEVBQUFBLE9BQU8sQ0FBQ2IsUUFBUixDQUFpQixPQUFqQixFQUEwQixDQUExQjtBQUVBQyxFQUFBQSxNQUFNLENBQ0xILFNBQVMsQ0FDUEMsSUFERixDQUNPLGlDQURQLEVBRUVBLElBRkYsQ0FFTyx3Q0FGUCxFQUdFZSxLQUhGLEdBSUVmLElBSkYsQ0FJTywrQ0FKUCxFQUtFSyxNQUxGLEVBREssQ0FBTixDQU9FVyxTQVBGO0FBUUEsQ0F2QkMsQ0FBRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHNoYWxsb3cgfSBmcm9tICdlbnp5bWUnO1xyXG5pbXBvcnQgeyBJbnB1dFRvUmFuZ2UgfSBmcm9tICcuL2luZGV4LmpzJztcclxuXHJcbmNvbnN0IGNoYW5nZUV2ID0ge1xyXG5cdHByZXZlbnREZWZhdWx0OiAoKSA9PiB7fSxcclxuXHR0YXJnZXQ6IHsgdmFsdWU6ICcxMjMnIH1cclxufTtcclxuY29uc3Qga2V5UHJlc3NFdiA9IHtcclxuXHRwcmV2ZW50RGVmYXVsdDogKCkgPT4ge30sXHJcblx0a2V5Q29kZTogMzJcclxufTtcclxuXHJcbml0KCdyZW5kZXJzIHdpdGhvdXQgY3Jhc2hpbmcnLCAoKSA9PiB7XHJcblx0c2hhbGxvdyg8SW5wdXRUb1JhbmdlIC8+KTtcclxufSk7XHJcblxyXG5pdCgnY2hlY2tzIGlucHV0IGNoYW5nZXMgYXJlIHdvcmtpbmcnLCAoKSA9PiB7XHJcblx0Y29uc3QgY29tcG9uZW50ID0gc2hhbGxvdyg8SW5wdXRUb1JhbmdlIC8+KTtcclxuXHJcblx0Y29tcG9uZW50LmZpbmQoJ2lucHV0Jykuc2ltdWxhdGUoJ2NoYW5nZScsIGNoYW5nZUV2KTtcclxuXHJcblx0ZXhwZWN0KGNvbXBvbmVudC5maW5kKCdpbnB1dCcpLnByb3BzKCkudmFsdWUpLnRvQmUoJzEyMycpO1xyXG59KTtcclxuXHJcbml0KCdjaGVja3MgaWYgZXJyb3IgYXBwZWFycycsICgpID0+IHtcclxuXHRjaGFuZ2VFdi50YXJnZXQudmFsdWUgPSAnbm90IGNvcnJlY3QgaW5wdXQsIHNob3VsZCBzaG93IGVycm9yJztcclxuXHRjb25zdCBjb21wb25lbnQgPSBzaGFsbG93KDxJbnB1dFRvUmFuZ2UgLz4pO1xyXG5cclxuXHRjb21wb25lbnQuZmluZCgnaW5wdXQnKS5zaW11bGF0ZSgnY2hhbmdlJywgY2hhbmdlRXYpO1xyXG5cdGNvbXBvbmVudC5maW5kKCdpbnB1dCcpLnNpbXVsYXRlKCdrZXlwcmVzcycsIGtleVByZXNzRXYpO1xyXG5cclxuXHRleHBlY3QoY29tcG9uZW50LmZpbmQoJy5JbnB1dFRvUmFuZ2VfX0Vycm9yJykuZXhpc3RzKCkpLnRvQmVUcnV0aHkoKTtcclxufSk7XHJcblxyXG5pdCgnY2hlY2tzIGlmIG9uQ2hhbmdlIGlzIGNhbGxlZCcsICgpID0+IHtcclxuXHRjb25zdCBwcm9wcyA9IHsgb25DaGFuZ2U6IGplc3QuZm4oKSB9O1xyXG5cdGNoYW5nZUV2LnRhcmdldC52YWx1ZSA9ICcxMjMnO1xyXG5cdGNvbnN0IGNvbXBvbmVudCA9IHNoYWxsb3coPElucHV0VG9SYW5nZSB7Li4ucHJvcHN9IC8+KTtcclxuXHRjb25zdCBzcHkgPSBqZXN0LnNweU9uKHByb3BzLCAnb25DaGFuZ2UnKTtcclxuXHJcblx0Y29tcG9uZW50LmZpbmQoJ2lucHV0Jykuc2ltdWxhdGUoJ2NoYW5nZScsIGNoYW5nZUV2KTtcclxuXHRjb21wb25lbnQuZmluZCgnaW5wdXQnKS5zaW11bGF0ZSgna2V5cHJlc3MnLCBrZXlQcmVzc0V2KTtcclxuXHJcblx0ZXhwZWN0KHNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG59KTtcclxuXHJcbml0KCdjaGVja3MgaWYgcmVtb3ZlTGFiZWwgd29ya3MnLCAoKSA9PiB7XHJcblx0Y2hhbmdlRXYudGFyZ2V0LnZhbHVlID0gJzEyMyc7XHJcblx0Y29uc3QgcHJvcHMgPSB7IHVzZUxhYmVsczogdHJ1ZSB9O1xyXG5cdGNvbnN0IGNvbXBvbmVudCA9IHNoYWxsb3coPElucHV0VG9SYW5nZSB7Li4ucHJvcHN9IC8+KTtcclxuXHJcblx0Y29tcG9uZW50LmZpbmQoJ2lucHV0Jykuc2ltdWxhdGUoJ2NoYW5nZScsIGNoYW5nZUV2KTtcclxuXHRjb21wb25lbnQuZmluZCgnaW5wdXQnKS5zaW11bGF0ZSgna2V5cHJlc3MnLCBrZXlQcmVzc0V2KTtcclxuXHJcblx0Y29uc3QgY2xvc2VFbCA9IGNvbXBvbmVudFxyXG5cdFx0LmZpbmQoJy5JbnB1dFRvUmFuZ2VfX2xhYmVscy1jb250YWluZXInKVxyXG5cdFx0LmZpbmQoJy5JbnB1dFRvUmFuZ2VfX2xhYmVscy1jb250YWluZXJfX2xhYmVsJylcclxuXHRcdC5maXJzdCgpXHJcblx0XHQuZmluZCgnLklucHV0VG9SYW5nZV9fbGFiZWxzLWNvbnRhaW5lcl9fbGFiZWxfX2Nsb3NlJyk7XHJcblx0Y2xvc2VFbC5zaW11bGF0ZSgnY2xpY2snLCAwKTtcclxuXHJcblx0ZXhwZWN0KFxyXG5cdFx0Y29tcG9uZW50XHJcblx0XHRcdC5maW5kKCcuSW5wdXRUb1JhbmdlX19sYWJlbHMtY29udGFpbmVyJylcclxuXHRcdFx0LmZpbmQoJy5JbnB1dFRvUmFuZ2VfX2xhYmVscy1jb250YWluZXJfX2xhYmVsJylcclxuXHRcdFx0LmZpcnN0KClcclxuXHRcdFx0LmZpbmQoJy5JbnB1dFRvUmFuZ2VfX2xhYmVscy1jb250YWluZXJfX2xhYmVsX19jbG9zZScpXHJcblx0XHRcdC5leGlzdHMoKVxyXG5cdCkudG9CZUZhbHN5KCk7XHJcbn0pO1xyXG4iXX0=