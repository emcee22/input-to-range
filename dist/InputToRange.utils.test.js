"use strict";

var _InputToRangeUtils = require("./InputToRange.utils.js");

it('cheks if splitTextBasedOnPattern() returns ok', function () {
  var numbersPattern1 = (0, _InputToRangeUtils.splitTextBasedOnPattern)('123');
  expect(numbersPattern1.first).toEqual(123);
  expect(numbersPattern1.second).toEqual(123);
  var numbersPattern3 = (0, _InputToRangeUtils.splitTextBasedOnPattern)('(-123)');
  expect(numbersPattern3.first).toEqual(-123);
  expect(numbersPattern3.second).toEqual(-123);
  var numbersPattern2 = (0, _InputToRangeUtils.splitTextBasedOnPattern)('1-100');
  expect(numbersPattern2.first).toEqual(1);
  expect(numbersPattern2.second).toEqual(100);
  var numbersPattern4 = (0, _InputToRangeUtils.splitTextBasedOnPattern)('(-10)-200');
  expect(numbersPattern4.first).toEqual(-10);
  expect(numbersPattern4.second).toEqual(200);
  var numbersPattern5 = (0, _InputToRangeUtils.splitTextBasedOnPattern)('(-10)-(-3)');
  expect(numbersPattern5.first).toEqual(-10);
  expect(numbersPattern5.second).toEqual(-3);
  var numbersPattern6 = (0, _InputToRangeUtils.splitTextBasedOnPattern)('10-(-3)');
  expect(numbersPattern6.first).toEqual(10);
  expect(numbersPattern6.second).toEqual(-3);
});
it('cheks if splitTextBasedOnPattern() returns false when provided value is invalid', function () {
  var check1 = (0, _InputToRangeUtils.splitTextBasedOnPattern)('123.00');
  expect(check1).toBeFalsy();
  var check2 = (0, _InputToRangeUtils.splitTextBasedOnPattern)('abc');
  expect(check2).toBeFalsy();
  var check3 = (0, _InputToRangeUtils.splitTextBasedOnPattern)('-100-50');
  expect(check3).toBeFalsy();
  var check4 = (0, _InputToRangeUtils.splitTextBasedOnPattern)('(-100)--50');
  expect(check4).toBeFalsy();
});
it('cheks if generateRangeBetweenTwoNumber() returns ok', function () {
  var _splitTextBasedOnPatt = (0, _InputToRangeUtils.splitTextBasedOnPattern)('(-50)-50'),
      first = _splitTextBasedOnPatt.first,
      second = _splitTextBasedOnPatt.second;

  var generateRange = (0, _InputToRangeUtils.generateRangeBetweenTwoNumber)(first, second);
  expect(generateRange[0]).toEqual(-50);
  expect(generateRange[generateRange.length - 1]).toEqual(50);
});
it('cheks if createRangeFromInputValue() returns ok', function () {
  var generateRange = (0, _InputToRangeUtils.createRangeFromInputValue)('(-50)-50');
  expect(generateRange[0]).toEqual(-50);
  expect(generateRange[generateRange.length - 1]).toEqual(50);
});
it('cheks if createMultipleRangesFromArrayOfValues() returns ok', function () {
  var generateRange = (0, _InputToRangeUtils.createMultipleRangesFromArrayOfValues)(['(-50)-50', '10-30', '0-2']);
  expect(generateRange[0][0]).toEqual(-50);
  expect(generateRange[0][generateRange[0].length - 1]).toEqual(50);
  expect(generateRange[1][0]).toEqual(10);
  expect(generateRange[1][generateRange[1].length - 1]).toEqual(30);
  expect(generateRange[2][0]).toEqual(0);
  expect(generateRange[2][generateRange[2].length - 1]).toEqual(2);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,